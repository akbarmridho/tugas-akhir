repositories:
  - name: grafana
    url: https://grafana.github.io/helm-charts
  - name: prometheus-community
    url: https://prometheus-community.github.io/helm-charts

releases:
  - name: grafana
    chart: grafana/grafana
    namespace: monitoring
    version: 8.13.1
    values:
      - persistence:
          type: pvc
          enabled: true
          size: 10Gi
        adminPassword: tugas-akhir
        datasources:
          datasources.yaml:
            apiVersion: 1
            datasources:
              - name: Loki
                type: loki
                access: proxy
                url: http://loki-gateway.monitoring.svc.cluster.local
              - name: Prometheus
                type: prometheus
                access: proxy
                url: http://prometheus-server.monitoring.svc.cluster.local
  - name: loki
    chart: grafana/loki
    namespace: monitoring
    version: 6.29.0
    set:
      - name: loki.auth_enabled
        value: false
    values:
      - loki:
          commonConfig:
            replication_factor: 3
          schemaConfig:
            configs:
              - from: "2025-04-24"
                store: tsdb
                object_store: s3
                schema: v13
                index:
                  prefix: loki_index_
                  period: 24h
          pattern_ingester:
              enabled: true
          limits_config:
            allow_structured_metadata: true
            volume_enabled: true
          ruler:
            enable_api: true
      - minio:
          enabled: true      
      - deploymentMode: SingleBinary
      - singleBinary:
          replicas: 2
      - backend:
          replicas: 0
      - read:
          replicas: 0
      - write:
          replicas: 0
      - ingester:
          replicas: 0
      - querier:
          replicas: 0
      - queryFrontend:
          replicas: 0
      - queryScheduler:
          replicas: 0
      - distributor:
          replicas: 0
      - compactor:
          replicas: 0
      - indexGateway:
          replicas: 0
      - bloomCompactor:
          replicas: 0
      - bloomGateway:
          replicas: 0
  - name: alloy
    chart: grafana/alloy
    namespace: monitoring
    version: 1.0.2
    values:
      - alloy:
          configMap:
            content: |-
              loki.write "default" {
                endpoint {
                  url = "http://loki.monitoring.svc:3100/loki/api/v1/push"
                }
              }

              // discovery.kubernetes allows you to find scrape targets from Kubernetes resources.
              // It watches cluster state and ensures targets are continually synced with what is currently running in your cluster.
              discovery.kubernetes "pod" {
                role = "pod"
              }

              // discovery.relabel rewrites the label set of the input targets by applying one or more relabeling rules.
              // If no rules are defined, then the input targets are exported as-is.
              discovery.relabel "pod_logs" {
                targets = discovery.kubernetes.pod.targets

                rule {
                  source_labels = ["__meta_kubernetes_namespace"]
                  regex = "monitoring"
                  action = "drop"
                }

                // Label creation - "namespace" field from "__meta_kubernetes_namespace"
                rule {
                  source_labels = ["__meta_kubernetes_namespace"]
                  action = "replace"
                  target_label = "namespace"
                }

                // Label creation - "pod" field from "__meta_kubernetes_pod_name"
                rule {
                  source_labels = ["__meta_kubernetes_pod_name"]
                  action = "replace"
                  target_label = "pod"
                }

                // Label creation - "container" field from "__meta_kubernetes_pod_container_name"
                rule {
                  source_labels = ["__meta_kubernetes_pod_container_name"]
                  action = "replace"
                  target_label = "container"
                }

                // Label creation -  "app" field from "__meta_kubernetes_pod_label_app_kubernetes_io_name"
                rule {
                  source_labels = ["__meta_kubernetes_pod_label_app_kubernetes_io_name"]
                  action = "replace"
                  target_label = "app"
                }

                // Label creation -  "job" field from "__meta_kubernetes_namespace" and "__meta_kubernetes_pod_container_name"
                // Concatenate values __meta_kubernetes_namespace/__meta_kubernetes_pod_container_name
                rule {
                  source_labels = ["__meta_kubernetes_namespace", "__meta_kubernetes_pod_container_name"]
                  action = "replace"
                  target_label = "job"
                  separator = "/"
                  replacement = "$1"
                }

                // Label creation - "container" field from "__meta_kubernetes_pod_uid" and "__meta_kubernetes_pod_container_name"
                // Concatenate values __meta_kubernetes_pod_uid/__meta_kubernetes_pod_container_name.log
                rule {
                  source_labels = ["__meta_kubernetes_pod_uid", "__meta_kubernetes_pod_container_name"]
                  action = "replace"
                  target_label = "__path__"
                  separator = "/"
                  replacement = "/var/log/pods/*$1/*.log"
                }

                // Label creation -  "container_runtime" field from "__meta_kubernetes_pod_container_id"
                rule {
                  source_labels = ["__meta_kubernetes_pod_container_id"]
                  action = "replace"
                  target_label = "container_runtime"
                  regex = "^(\\S+):\\/\\/.+$"
                  replacement = "$1"
                }
              }

              // loki.source.kubernetes tails logs from Kubernetes containers using the Kubernetes API.
              loki.source.kubernetes "pod_logs" {
                targets    = discovery.relabel.pod_logs.output
                forward_to = [loki.process.pod_logs.receiver]
              }

              // loki.process receives log entries from other Loki components, applies one or more processing stages,
              // and forwards the results to the list of receivers in the component's arguments.
              loki.process "pod_logs" {
                stage.static_labels {
                    values = {
                      cluster = "k3d-tugas-akhir",
                    }
                }

                forward_to = [loki.write.default.receiver]
              }
  - name: prometheus
    chart: prometheus-community/prometheus
    namespace: monitoring
    version: 27.11.0