// This file is auto-generated by @hey-api/openapi-ts

export type AreaAvailability = {
	ticketPackageId: number;
	ticketAreaId: number;
	totalSeats: number;
	availableSeats: number;
};

export type AreaType = "numbered-seating" | "free-standing";

export type ErrorResponseModel = {
	message: string;
	errors?: Array<FieldError>;
};

export type Event = {
	id: number;
	name: string;
	location: string;
	description: string;
	createdAt: string;
	updatedAt: string;
	ticketSales?: Array<TicketSale>;
};

export type FieldError = {
	field: string;
	tag: string;
	message: string;
};

export type Invoice = {
	id: number;
	status: InvoiceStatus;
	amount: number;
	externalId: string;
	orderId: number;
	createdAt: string;
	updatedAt: string;
};

export type InvoiceStatus = "pending" | "expired" | "failed" | "success";

export type IssuedTicket = {
	id: number;
	serialNumber: string;
	holderName: string;
	name: string;
	description: string;
	seatId: number;
	orderId: number;
	orderItemId: number;
	createdAt: string;
	updatedAt: string;
	ticketSeat: TicketSeat;
};

export type Order = {
	id: number;
	status: OrderStatus;
	failReason: string | null;
	eventId: number;
	ticketSaleId: number;
	ticketAreaId: number;
	externalUserId: string;
	createdAt: string;
	updatedAt: string;
	items: Array<OrderItem>;
	invoice: Invoice | null;
	event?: Event;
	ticketSale?: TicketSale;
};

export type OrderItem = {
	id: number;
	customerName: string;
	customerEmail: string;
	price: number;
	orderId: number;
	ticketCategoryId: number;
	ticketSeatId: number;
	createdAt: string;
	updatedAt: string;
	ticketSeat?: TicketSeat;
	ticketCategory?: TicketCategory;
};

export type OrderItemDto = {
	customerName: string;
	customerEmail: string;
	ticketSeatId: number;
};

/**
 * Orders
 */
export type OrderStatus = "waiting-for-payment" | "failed" | "success";

export type PlaceOrderDto = {
	eventId: number;
	ticketSaleId: number;
	ticketAreaId: number;
	items: Array<OrderItemDto>;
};

/**
 * Events
 */
export type SeatStatus = "available" | "on-hold" | "sold";

export type TicketArea = {
	id: number;
	type: AreaType;
	ticketPackageId: number;
	createdAt: string;
	updatedAt: string;
	ticketSeats?: Array<TicketSeat>;
};

export type TicketCategory = {
	id: number;
	name: string;
	createdAt: string;
	updatedAt: string;
};

export type TicketPackage = {
	id: number;
	price: number;
	ticketCategoryId: number;
	ticketSaleId: number;
	createdAt: string;
	updatedAt: string;
	ticketCategory: TicketCategory;
	ticketAreas: Array<TicketArea>;
};

export type TicketSale = {
	id: number;
	name: string;
	saleBeginAt: string;
	saleEndAt: string;
	eventId: number;
	createdAt: string;
	updatedAt: string;
	ticketPackages: Array<TicketPackage>;
};

export type TicketSeat = {
	id: number;
	seatNumber: string;
	status: SeatStatus;
	ticketAreaId: number;
	createdAt: string;
	updatedAt: string;
	ticketArea?: TicketArea;
};

export type GetAvailabilityDto = number;

export type GetEventDto = number;

export type GetIssuedTicketDto = number;

export type GetOrderDto = number;

export type GetSeatsDto = number;

export type EventRoutesGetEventsData = {
	body?: never;
	path?: never;
	query?: never;
	url: "/events/";
};

export type EventRoutesGetEventsResponses = {
	/**
	 * The request has succeeded.
	 */
	200: {
		data: Array<Event>;
		message?: string;
	};
};

export type EventRoutesGetEventsResponse =
	EventRoutesGetEventsResponses[keyof EventRoutesGetEventsResponses];

export type EventRoutesGetAvailabilityData = {
	body?: never;
	path: {
		ticketSaleId: number;
	};
	query?: never;
	url: "/events/availability/{ticketSaleId}";
};

export type EventRoutesGetAvailabilityErrors = {
	/**
	 * The server could not understand the request due to invalid syntax.
	 */
	400: ErrorResponseModel;
	/**
	 * The server cannot find the requested resource.
	 */
	404: ErrorResponseModel;
};

export type EventRoutesGetAvailabilityError =
	EventRoutesGetAvailabilityErrors[keyof EventRoutesGetAvailabilityErrors];

export type EventRoutesGetAvailabilityResponses = {
	/**
	 * The request has succeeded.
	 */
	200: {
		data: Array<AreaAvailability>;
		message?: string;
	};
};

export type EventRoutesGetAvailabilityResponse =
	EventRoutesGetAvailabilityResponses[keyof EventRoutesGetAvailabilityResponses];

export type EventRoutesGetSeatsData = {
	body?: never;
	path: {
		ticketAreaId: number;
	};
	query?: never;
	url: "/events/seats/{ticketAreaId}";
};

export type EventRoutesGetSeatsErrors = {
	/**
	 * The server could not understand the request due to invalid syntax.
	 */
	400: ErrorResponseModel;
	/**
	 * The server cannot find the requested resource.
	 */
	404: ErrorResponseModel;
};

export type EventRoutesGetSeatsError =
	EventRoutesGetSeatsErrors[keyof EventRoutesGetSeatsErrors];

export type EventRoutesGetSeatsResponses = {
	/**
	 * The request has succeeded.
	 */
	200: {
		data: Array<TicketSeat>;
		message?: string;
	};
};

export type EventRoutesGetSeatsResponse =
	EventRoutesGetSeatsResponses[keyof EventRoutesGetSeatsResponses];

export type EventRoutesGetEventData = {
	body?: never;
	path: {
		eventId: number;
	};
	query?: never;
	url: "/events/{eventId}";
};

export type EventRoutesGetEventErrors = {
	/**
	 * The server could not understand the request due to invalid syntax.
	 */
	400: ErrorResponseModel;
	/**
	 * The server cannot find the requested resource.
	 */
	404: ErrorResponseModel;
};

export type EventRoutesGetEventError =
	EventRoutesGetEventErrors[keyof EventRoutesGetEventErrors];

export type EventRoutesGetEventResponses = {
	/**
	 * The request has succeeded.
	 */
	200: {
		data: Event;
		message?: string;
	};
};

export type EventRoutesGetEventResponse =
	EventRoutesGetEventResponses[keyof EventRoutesGetEventResponses];

export type OrderRoutesPlaceOrderData = {
	body: PlaceOrderDto;
	headers: {
		"idempotency-key": string;
	};
	path?: never;
	query?: never;
	url: "/orders/";
};

export type OrderRoutesPlaceOrderErrors = {
	/**
	 * The server could not understand the request due to invalid syntax.
	 */
	400: ErrorResponseModel;
	/**
	 * The request conflicts with the current state of the server.
	 */
	409: {
		message: string;
	};
};

export type OrderRoutesPlaceOrderError =
	OrderRoutesPlaceOrderErrors[keyof OrderRoutesPlaceOrderErrors];

export type OrderRoutesPlaceOrderResponses = {
	/**
	 * The request has succeeded.
	 */
	200: {
		data: Order;
		message?: string;
	};
};

export type OrderRoutesPlaceOrderResponse =
	OrderRoutesPlaceOrderResponses[keyof OrderRoutesPlaceOrderResponses];

export type OrderRoutesGetOrderData = {
	body?: never;
	path: {
		id: number;
	};
	query?: never;
	url: "/orders/{id}";
};

export type OrderRoutesGetOrderErrors = {
	/**
	 * The server could not understand the request due to invalid syntax.
	 */
	400: ErrorResponseModel;
	/**
	 * The server cannot find the requested resource.
	 */
	404: ErrorResponseModel;
};

export type OrderRoutesGetOrderError =
	OrderRoutesGetOrderErrors[keyof OrderRoutesGetOrderErrors];

export type OrderRoutesGetOrderResponses = {
	/**
	 * The request has succeeded.
	 */
	200: {
		data: Order;
		message?: string;
	};
};

export type OrderRoutesGetOrderResponse =
	OrderRoutesGetOrderResponses[keyof OrderRoutesGetOrderResponses];

export type OrderRoutesGetIssuedTicketsData = {
	body?: never;
	path: {
		id: number;
	};
	query?: never;
	url: "/orders/{id}/tickets";
};

export type OrderRoutesGetIssuedTicketsErrors = {
	/**
	 * The server could not understand the request due to invalid syntax.
	 */
	400: ErrorResponseModel;
	/**
	 * The server cannot find the requested resource.
	 */
	404: ErrorResponseModel;
};

export type OrderRoutesGetIssuedTicketsError =
	OrderRoutesGetIssuedTicketsErrors[keyof OrderRoutesGetIssuedTicketsErrors];

export type OrderRoutesGetIssuedTicketsResponses = {
	/**
	 * The request has succeeded.
	 */
	200: {
		data: IssuedTicket;
		message?: string;
	};
};

export type OrderRoutesGetIssuedTicketsResponse =
	OrderRoutesGetIssuedTicketsResponses[keyof OrderRoutesGetIssuedTicketsResponses];

export type ClientOptions = {
	baseUrl: "{protocol}://{hostname}" | (string & {});
};
