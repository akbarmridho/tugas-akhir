// This file is auto-generated by @hey-api/openapi-ts

import type {
	Options as ClientOptions,
	TDataShape,
	Client,
} from "@hey-api/client-fetch";
import type {
	EventRoutesGetEventsData,
	EventRoutesGetEventsResponse,
	EventRoutesGetAvailabilityData,
	EventRoutesGetAvailabilityResponse,
	EventRoutesGetAvailabilityError,
	EventRoutesGetSeatsData,
	EventRoutesGetSeatsResponse,
	EventRoutesGetSeatsError,
	EventRoutesGetEventData,
	EventRoutesGetEventResponse,
	EventRoutesGetEventError,
	OrderRoutesPlaceOrderData,
	OrderRoutesPlaceOrderResponse,
	OrderRoutesPlaceOrderError,
	OrderRoutesGetOrderData,
	OrderRoutesGetOrderResponse,
	OrderRoutesGetOrderError,
	OrderRoutesGetIssuedTicketsData,
	OrderRoutesGetIssuedTicketsResponse,
	OrderRoutesGetIssuedTicketsError,
} from "./types.gen";
import { client as _heyApiClient } from "./client.gen";

export type Options<
	TData extends TDataShape = TDataShape,
	ThrowOnError extends boolean = boolean,
> = ClientOptions<TData, ThrowOnError> & {
	/**
	 * You can provide a client instance returned by `createClient()` instead of
	 * individual options. This might be also useful if you want to implement a
	 * custom client.
	 */
	client?: Client;
	/**
	 * You can pass arbitrary values through the `meta` object. This can be
	 * used to access values that aren't defined as part of the SDK function.
	 */
	meta?: Record<string, unknown>;
};

export const eventRoutesGetEvents = <ThrowOnError extends boolean = false>(
	options?: Options<EventRoutesGetEventsData, ThrowOnError>,
) => {
	return (options?.client ?? _heyApiClient).get<
		EventRoutesGetEventsResponse,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: "bearer",
				type: "http",
			},
		],
		url: "/events/",
		...options,
	});
};

export const eventRoutesGetAvailability = <
	ThrowOnError extends boolean = false,
>(
	options: Options<EventRoutesGetAvailabilityData, ThrowOnError>,
) => {
	return (options.client ?? _heyApiClient).get<
		EventRoutesGetAvailabilityResponse,
		EventRoutesGetAvailabilityError,
		ThrowOnError
	>({
		security: [
			{
				scheme: "bearer",
				type: "http",
			},
		],
		url: "/events/availability/{ticketSaleId}",
		...options,
	});
};

export const eventRoutesGetSeats = <ThrowOnError extends boolean = false>(
	options: Options<EventRoutesGetSeatsData, ThrowOnError>,
) => {
	return (options.client ?? _heyApiClient).get<
		EventRoutesGetSeatsResponse,
		EventRoutesGetSeatsError,
		ThrowOnError
	>({
		security: [
			{
				scheme: "bearer",
				type: "http",
			},
		],
		url: "/events/seats/{ticketAreaId}",
		...options,
	});
};

export const eventRoutesGetEvent = <ThrowOnError extends boolean = false>(
	options: Options<EventRoutesGetEventData, ThrowOnError>,
) => {
	return (options.client ?? _heyApiClient).get<
		EventRoutesGetEventResponse,
		EventRoutesGetEventError,
		ThrowOnError
	>({
		security: [
			{
				scheme: "bearer",
				type: "http",
			},
		],
		url: "/events/{eventId}",
		...options,
	});
};

export const orderRoutesPlaceOrder = <ThrowOnError extends boolean = false>(
	options: Options<OrderRoutesPlaceOrderData, ThrowOnError>,
) => {
	return (options.client ?? _heyApiClient).post<
		OrderRoutesPlaceOrderResponse,
		OrderRoutesPlaceOrderError,
		ThrowOnError
	>({
		security: [
			{
				scheme: "bearer",
				type: "http",
			},
		],
		url: "/orders/",
		...options,
		headers: {
			"Content-Type": "application/json",
			...options?.headers,
		},
	});
};

export const orderRoutesGetOrder = <ThrowOnError extends boolean = false>(
	options: Options<OrderRoutesGetOrderData, ThrowOnError>,
) => {
	return (options.client ?? _heyApiClient).get<
		OrderRoutesGetOrderResponse,
		OrderRoutesGetOrderError,
		ThrowOnError
	>({
		security: [
			{
				scheme: "bearer",
				type: "http",
			},
		],
		url: "/orders/{id}",
		...options,
	});
};

export const orderRoutesGetIssuedTickets = <
	ThrowOnError extends boolean = false,
>(
	options: Options<OrderRoutesGetIssuedTicketsData, ThrowOnError>,
) => {
	return (options.client ?? _heyApiClient).get<
		OrderRoutesGetIssuedTicketsResponse,
		OrderRoutesGetIssuedTicketsError,
		ThrowOnError
	>({
		security: [
			{
				scheme: "bearer",
				type: "http",
			},
		],
		url: "/orders/{id}/tickets",
		...options,
	});
};
