// @ts-nocheck
/** biome-ignore-all lint/suspicious/noImplicitAnyLet: idis wadidis */
// biome-ignore-all lint/style/useTemplate: autogenerated
/**
 * Automatically generated by @grafana/openapi-to-k6: 0.3.2
 * Do not edit manually.
 * Ticket Backend Service
 * Service version: 0.0.0
 */
import { URL } from "https://jslib.k6.io/url/1.0.0/index.js";

import http from "k6/http";
import type { Params, Response } from "k6/http";

export interface AreaAvailability {
	ticketPackageId: number;
	ticketAreaId: number;
	totalSeats: number;
	availableSeats: number;
}

export type AreaType = (typeof AreaType)[keyof typeof AreaType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const AreaType = {
	"numbered-seating": "numbered-seating",
	"free-standing": "free-standing",
} as const;

export interface ErrorResponseModel {
	message: string;
	errors?: FieldError[];
}

export interface Event {
	id: number;
	name: string;
	location: string;
	description: string;
	createdAt: string;
	updatedAt: string;
	ticketSales?: TicketSale[];
}

export interface FieldError {
	field: string;
	tag: string;
	message: string;
}

export interface Invoice {
	id: number;
	status: InvoiceStatus;
	amount: number;
	externalId: string;
	orderId: number;
	createdAt: string;
	updatedAt: string;
}

export type InvoiceStatus = (typeof InvoiceStatus)[keyof typeof InvoiceStatus];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const InvoiceStatus = {
	pending: "pending",
	expired: "expired",
	failed: "failed",
	success: "success",
} as const;

export interface IssuedTicket {
	id: number;
	serialNumber: string;
	holderName: string;
	name: string;
	description: string;
	seatId: number;
	orderId: number;
	orderItemId: number;
	createdAt: string;
	updatedAt: string;
	ticketSeat: TicketSeat;
}

/**
 * @nullable
 */
export type OrderInvoice = Invoice | null;

export interface Order {
	id: number;
	status: OrderStatus;
	/** @nullable */
	failReason: string | null;
	eventId: number;
	ticketSaleId: number;
	ticketAreaId: number;
	externalUserId: string;
	createdAt: string;
	updatedAt: string;
	items: OrderItem[];
	/** @nullable */
	invoice: OrderInvoice;
	event?: Event;
	ticketSale?: TicketSale;
}

export interface OrderItem {
	id: number;
	customerName: string;
	customerEmail: string;
	price: number;
	orderId: number;
	ticketCategoryId: number;
	ticketSeatId: number;
	createdAt: string;
	updatedAt: string;
	ticketSeat?: TicketSeat;
	ticketCategory?: TicketCategory;
}

export interface OrderItemDto {
	customerName: string;
	customerEmail: string;
	ticketSeatId: number;
}

/**
 * Orders
 */
export type OrderStatus = (typeof OrderStatus)[keyof typeof OrderStatus];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const OrderStatus = {
	"waiting-for-payment": "waiting-for-payment",
	failed: "failed",
	success: "success",
} as const;

export interface PlaceOrderDto {
	eventId: number;
	ticketSaleId: number;
	ticketAreaId: number;
	/**
	 * @minItems 1
	 * @maxItems 5
	 */
	items: OrderItemDto[];
}

/**
 * Events
 */
export type SeatStatus = (typeof SeatStatus)[keyof typeof SeatStatus];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const SeatStatus = {
	available: "available",
	"on-hold": "on-hold",
	sold: "sold",
} as const;

export interface TicketArea {
	id: number;
	type: AreaType;
	ticketPackageId: number;
	createdAt: string;
	updatedAt: string;
	ticketSeats?: TicketSeat[];
}

export interface TicketCategory {
	id: number;
	name: string;
	createdAt: string;
	updatedAt: string;
}

export interface TicketPackage {
	id: number;
	price: number;
	ticketCategoryId: number;
	ticketSaleId: number;
	createdAt: string;
	updatedAt: string;
	ticketCategory: TicketCategory;
	ticketAreas: TicketArea[];
}

export interface TicketSale {
	id: number;
	name: string;
	saleBeginAt: string;
	saleEndAt: string;
	eventId: number;
	createdAt: string;
	updatedAt: string;
	ticketPackages: TicketPackage[];
}

export interface TicketSeat {
	id: number;
	seatNumber: string;
	status: SeatStatus;
	ticketAreaId: number;
	createdAt: string;
	updatedAt: string;
	ticketArea?: TicketArea;
}

export type EventRoutesGetEvents200 = {
	data: Event[];
	message?: string;
};

export type EventRoutesGetAvailability200 = {
	data: AreaAvailability[];
	message?: string;
};

export type EventRoutesGetSeats200 = {
	data: TicketSeat[];
	message?: string;
};

export type EventRoutesGetEvent200 = {
	data: Event;
	message?: string;
};

export type OrderRoutesPlaceOrderHeaders = {
	"idempotency-key": string;
};

export type OrderRoutesPlaceOrder200 = {
	data: Order;
	message?: string;
};

export type OrderRoutesPlaceOrder409 = {
	message: string;
};

export type OrderRoutesGetOrder200 = {
	data: Order;
	message?: string;
};

export type OrderRoutesGetIssuedTickets200 = {
	data: IssuedTicket;
	message?: string;
};

/**
 * This is the base client to use for interacting with the API.
 */
export class TicketBackendServiceClient {
	private cleanBaseUrl: string;
	private commonRequestParameters: Params;

	constructor(clientOptions: {
		baseUrl: string;
		commonRequestParameters?: Params;
	}) {
		this.cleanBaseUrl = clientOptions.baseUrl.replace(/\/+$/, "");

		this.commonRequestParameters = clientOptions.commonRequestParameters || {};
	}

	eventRoutesGetEvents(requestParameters?: Params): {
		response: Response;
		data: EventRoutesGetEvents200;
	} {
		const url = new URL(this.cleanBaseUrl + `/events/`);
		const mergedRequestParameters = this._mergeRequestParameters(
			requestParameters || {},
			this.commonRequestParameters,
		);
		const response = http.request(
			"GET",
			url.toString(),
			undefined,
			mergedRequestParameters,
		);
		let data;

		try {
			data = response.json();
		} catch {
			data = response.body;
		}
		return {
			response,
			data,
		};
	}

	eventRoutesGetAvailability(
		ticketSaleId: number,
		requestParameters?: Params,
	): {
		response: Response;
		data: EventRoutesGetAvailability200;
	} {
		const url = new URL(
			this.cleanBaseUrl + `/events/availability/${ticketSaleId}`,
		);
		const mergedRequestParameters = this._mergeRequestParameters(
			requestParameters || {},
			this.commonRequestParameters,
		);
		const response = http.request(
			"GET",
			url.toString(),
			undefined,
			mergedRequestParameters,
		);
		let data;

		try {
			data = response.json();
		} catch {
			data = response.body;
		}
		return {
			response,
			data,
		};
	}

	eventRoutesGetSeats(
		ticketAreaId: number,
		requestParameters?: Params,
	): {
		response: Response;
		data: EventRoutesGetSeats200;
	} {
		const url = new URL(this.cleanBaseUrl + `/events/seats/${ticketAreaId}`);
		const mergedRequestParameters = this._mergeRequestParameters(
			requestParameters || {},
			this.commonRequestParameters,
		);
		const response = http.request(
			"GET",
			url.toString(),
			undefined,
			mergedRequestParameters,
		);
		let data;

		try {
			data = response.json();
		} catch {
			data = response.body;
		}
		return {
			response,
			data,
		};
	}

	eventRoutesGetEvent(
		eventId: number,
		requestParameters?: Params,
	): {
		response: Response;
		data: EventRoutesGetEvent200;
	} {
		const url = new URL(this.cleanBaseUrl + `/events/${eventId}`);
		const mergedRequestParameters = this._mergeRequestParameters(
			requestParameters || {},
			this.commonRequestParameters,
		);
		const response = http.request(
			"GET",
			url.toString(),
			undefined,
			mergedRequestParameters,
		);
		let data;

		try {
			data = response.json();
		} catch {
			data = response.body;
		}
		return {
			response,
			data,
		};
	}

	orderRoutesPlaceOrder(
		placeOrderDto: PlaceOrderDto,
		headers: OrderRoutesPlaceOrderHeaders,
		requestParameters?: Params,
	): {
		response: Response;
		data: OrderRoutesPlaceOrder200;
	} {
		const url = new URL(this.cleanBaseUrl + `/orders/`);
		const mergedRequestParameters = this._mergeRequestParameters(
			requestParameters || {},
			this.commonRequestParameters,
		);
		const response = http.request(
			"POST",
			url.toString(),
			JSON.stringify(placeOrderDto),
			{
				...mergedRequestParameters,
				headers: {
					...mergedRequestParameters?.headers,
					"Content-Type": "application/json",
					// In the schema, headers can be of any type like number but k6 accepts only strings as headers, hence converting all headers to string
					...Object.fromEntries(
						Object.entries(headers || {}).map(([key, value]) => [
							key,
							String(value),
						]),
					),
				},
			},
		);
		let data;

		try {
			data = response.json();
		} catch {
			data = response.body;
		}
		return {
			response,
			data,
		};
	}

	orderRoutesGetOrder(
		id: number,
		requestParameters?: Params,
	): {
		response: Response;
		data: OrderRoutesGetOrder200;
	} {
		const url = new URL(this.cleanBaseUrl + `/orders/${id}`);
		const mergedRequestParameters = this._mergeRequestParameters(
			requestParameters || {},
			this.commonRequestParameters,
		);
		const response = http.request(
			"GET",
			url.toString(),
			undefined,
			mergedRequestParameters,
		);
		let data;

		try {
			data = response.json();
		} catch {
			data = response.body;
		}
		return {
			response,
			data,
		};
	}

	orderRoutesGetIssuedTickets(
		id: number,
		requestParameters?: Params,
	): {
		response: Response;
		data: OrderRoutesGetIssuedTickets200;
	} {
		const url = new URL(this.cleanBaseUrl + `/orders/${id}/tickets`);
		const mergedRequestParameters = this._mergeRequestParameters(
			requestParameters || {},
			this.commonRequestParameters,
		);
		const response = http.request(
			"GET",
			url.toString(),
			undefined,
			mergedRequestParameters,
		);
		let data;

		try {
			data = response.json();
		} catch {
			data = response.body;
		}
		return {
			response,
			data,
		};
	}

	/**
	 * Merges the provided request parameters with default parameters for the client.
	 *
	 * @param {Params} requestParameters - The parameters provided specifically for the request
	 * @param {Params} commonRequestParameters - Common parameters for all requests
	 * @returns {Params} - The merged parameters
	 */
	private _mergeRequestParameters(
		requestParameters?: Params,
		commonRequestParameters?: Params,
	): Params {
		return {
			...commonRequestParameters, // Default to common parameters
			...requestParameters, // Override with request-specific parameters
			headers: {
				...(commonRequestParameters?.headers || {}), // Ensure headers are defined
				...(requestParameters?.headers || {}),
			},
			cookies: {
				...(commonRequestParameters?.cookies || {}), // Ensure cookies are defined
				...(requestParameters?.cookies || {}),
			},
			tags: {
				...(commonRequestParameters?.tags || {}), // Ensure tags are defined
				...(requestParameters?.tags || {}),
			},
		};
	}
}
