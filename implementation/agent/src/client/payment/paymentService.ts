// @ts-nocheck
/** biome-ignore-all lint/suspicious/noImplicitAnyLet: idis wadidis */
// biome-ignore-all lint/style/useTemplate: autogenerated
/**
 * Automatically generated by @grafana/openapi-to-k6: 0.3.2
 * Do not edit manually.
 * Payment Service
 * Service version: 1.0.0
 */
import { URL } from "https://jslib.k6.io/url/1.0.0/index.js";

import http from "k6/http";
import type { Params, Response } from "k6/http";

export type InvoiceStatus = (typeof InvoiceStatus)[keyof typeof InvoiceStatus];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const InvoiceStatus = {
	pending: "pending",
	expired: "expired",
	paid: "paid",
	failed: "failed",
} as const;

export interface Invoice {
	id: string;
	/**
	 * @minimum 0
	 * @exclusiveMinimum
	 */
	amount: number;
	description?: string;
	externalId: string;
	/** @nullable */
	createdAt: string | null;
	/** @nullable */
	expiredAt: string | null;
	/** @nullable */
	paidAt: string | null;
	/** @nullable */
	paidAmount: number | null;
	status: InvoiceStatus;
}

export interface CreateInvoiceRequest {
	/**
	 * @minimum 0
	 * @exclusiveMinimum
	 */
	amount: number;
	description?: string;
	externalId: string;
}

export type PayInvoiceRequestMode =
	(typeof PayInvoiceRequestMode)[keyof typeof PayInvoiceRequestMode];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const PayInvoiceRequestMode = {
	success: "success",
	failed: "failed",
} as const;

export interface PayInvoiceRequest {
	mode: PayInvoiceRequestMode;
}

export type GetInvoicesId404 = {
	message: string;
};

export type PostInvoicesIdPayment400 = {
	message: string;
};

export type PostInvoicesIdPayment404 = {
	message: string;
};

/**
 * This is the base client to use for interacting with the API.
 */
export class PaymentServiceClient {
	private cleanBaseUrl: string;
	private commonRequestParameters: Params;

	constructor(clientOptions: {
		baseUrl: string;
		commonRequestParameters?: Params;
	}) {
		this.cleanBaseUrl = clientOptions.baseUrl.replace(/\/+$/, "");

		this.commonRequestParameters = clientOptions.commonRequestParameters || {};
	}

	/**
	 * @summary Get Invoice
	 */
	getInvoicesId(
		id: string,
		requestParameters?: Params,
	): {
		response: Response;
		data: Invoice;
	} {
		const url = new URL(this.cleanBaseUrl + `/invoices/${id}`);
		const mergedRequestParameters = this._mergeRequestParameters(
			requestParameters || {},
			this.commonRequestParameters,
		);
		const response = http.request(
			"GET",
			url.toString(),
			undefined,
			mergedRequestParameters,
		);
		let data;

		try {
			data = response.json();
		} catch {
			data = response.body;
		}
		return {
			response,
			data,
		};
	}

	/**
	 * @summary Create Invoice
	 */
	postInvoices(
		createInvoiceRequest: CreateInvoiceRequest,
		requestParameters?: Params,
	): {
		response: Response;
		data: Invoice;
	} {
		const url = new URL(this.cleanBaseUrl + `/invoices`);
		const mergedRequestParameters = this._mergeRequestParameters(
			requestParameters || {},
			this.commonRequestParameters,
		);
		const response = http.request(
			"POST",
			url.toString(),
			JSON.stringify(createInvoiceRequest),
			{
				...mergedRequestParameters,
				headers: {
					...mergedRequestParameters?.headers,
					"Content-Type": "application/json",
				},
			},
		);
		let data;

		try {
			data = response.json();
		} catch {
			data = response.body;
		}
		return {
			response,
			data,
		};
	}

	/**
	 * @summary Pay Invoice
	 */
	postInvoicesIdPayment(
		id: string,
		payInvoiceRequest: PayInvoiceRequest,
		requestParameters?: Params,
	): {
		response: Response;
		data: Invoice;
	} {
		const url = new URL(this.cleanBaseUrl + `/invoices/${id}/payment`);
		const mergedRequestParameters = this._mergeRequestParameters(
			requestParameters || {},
			this.commonRequestParameters,
		);
		const response = http.request(
			"POST",
			url.toString(),
			JSON.stringify(payInvoiceRequest),
			{
				...mergedRequestParameters,
				headers: {
					...mergedRequestParameters?.headers,
					"Content-Type": "application/json",
				},
			},
		);
		let data;

		try {
			data = response.json();
		} catch {
			data = response.body;
		}
		return {
			response,
			data,
		};
	}

	/**
	 * Merges the provided request parameters with default parameters for the client.
	 *
	 * @param {Params} requestParameters - The parameters provided specifically for the request
	 * @param {Params} commonRequestParameters - Common parameters for all requests
	 * @returns {Params} - The merged parameters
	 */
	private _mergeRequestParameters(
		requestParameters?: Params,
		commonRequestParameters?: Params,
	): Params {
		return {
			...commonRequestParameters, // Default to common parameters
			...requestParameters, // Override with request-specific parameters
			headers: {
				...(commonRequestParameters?.headers || {}), // Ensure headers are defined
				...(requestParameters?.headers || {}),
			},
			cookies: {
				...(commonRequestParameters?.cookies || {}), // Ensure cookies are defined
				...(requestParameters?.cookies || {}),
			},
			tags: {
				...(commonRequestParameters?.tags || {}), // Ensure tags are defined
				...(requestParameters?.tags || {}),
			},
		};
	}
}
