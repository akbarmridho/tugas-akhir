// MY REFERENCES

@mastersthesis{eventDrivenArchitectureWithKafka,
  author = {Liarokapis, Alexandros Aris},
  school = {National Technical University of Athens},
  title  = {Event-Driven Architectures using Apache Kafka},
  year   = {2022},
  month  = {July},
  type   = {Diploma Thesis}
}

@mastersthesis{microservicesEventDriven,
  author = {Luwianto, Leonardus Brandon},
  school = {Institut Teknologi Bandung},
  title  = {Implementasi Arsitektur Microservices Menggunakan Komunikasi Event-Driven Pada Aplikasi Pemesanan Tiket Acara},
  year   = {2023},
  month  = {9},
  type   = {Diploma Thesis}
}

@mastersthesis{backendForTicketing,
  author = {Almedia, Rafael Borges},
  school = {Universidade Do Porto},
  title  = {Backend for a Ticketing System},
  year   = {2018}
}

@inproceedings{citus,
  author    = {Cubukcu, Umur and Erdogan, Ozgun and Pathak, Sumedh and Sannakkayala, Sudhakar and Slot, Marco},
  title     = {Citus: Distributed PostgreSQL for Data-Intensive Applications},
  year      = {2021},
  isbn      = {9781450383431},
  publisher = {Association for Computing Machinery},
  address   = {New York, NY, USA},
  url       = {https://doi.org/10.1145/3448016.3457551},
  doi       = {10.1145/3448016.3457551},
  abstract  = {Citus is an open source distributed database engine for PostgreSQL that is implemented as an extension. Citus gives users the ability to distribute data, queries, and transactions in PostgreSQL across a cluster of PostgreSQL servers to handle the needs of data-intensive applications. The development of Citus has largely been driven by conversations with companies looking to scale PostgreSQL beyond a single server and their workload requirements. This paper describes the requirements of four common workload patterns and how Citus addresses those requirements. It also shares benchmark results demonstrating the performance and scalability of Citus in each of the workload patterns and describes how Microsoft uses Citus to address one of its most challenging data problems.},
  booktitle = {Proceedings of the 2021 International Conference on Management of Data},
  pages     = {2490–2502},
  numpages  = {13},
  keywords  = {database extension, distributed database, postgresql, relational database},
  location  = {Virtual Event, China},
  series    = {SIGMOD '21}
}

@inproceedings{risingwave,
  author    = {Wang, Yanghao and Liu, Zhi},
  title     = {A sneak peek at RisingWave: a cloud-native streaming database},
  year      = {2022},
  isbn      = {9781450393089},
  publisher = {Association for Computing Machinery},
  address   = {New York, NY, USA},
  url       = {https://doi.org/10.1145/3524860.3543284},
  doi       = {10.1145/3524860.3543284},
  abstract  = {This paper presents RisingWave, a new cloud-native streaming database under development. RisingWave's mission is to democratize stream processing: to make stream processing simple, affordable, and accessible. To achieve that, RisingWave treats streams as first-class citizens in a database and uses PostgreSQL compatible SQL interface. Users can create their streaming analytical task by defining materialized views. The views are incrementally maintained in the RisingWave streaming engine, and are ready to be queried directly without exporting to an external system. RisingWave is designed for the cloud. The tiered architecture decouples its components such that each component scales independently to fully leverage the cloud infrastructure and reduce the cost. We demonstrate how RisingWave can simplify users' real-time analytical missions in the modern data stack.},
  booktitle = {Proceedings of the 16th ACM International Conference on Distributed and Event-Based Systems},
  pages     = {190–193},
  numpages  = {4},
  keywords  = {stream processing, streaming databases},
  location  = {Copenhagen, Denmark},
  series    = {DEBS '22}
}

@book{softwareArchitecture,
  author    = {Richards, Mark and Ford, Neal},
  publisher = {O'Reilly Media, Inc.},
  title     = {Fundamentals of Software Architecture},
  year      = {2020}
}

@book{dataIntensiveApplications,
  author    = {Kleppmann, Martin},
  publisher = {O'Reilly Media, Inc.},
  title     = {Designing Data-Intensive Applications},
  year      = {2017}
}

@book{designingEventDrivenSystem,
  title   = {Designing Event-Driven Systems: Concepts and Patterns for Streaming Services with Apache Kafka},
  author  = {Stopford, Ben},
  year    = {2018},
  edition = {1st}
}

@online{databaseInsideOut,
  title   = {Turning the database inside-out with Apache Samza},
  author  = {Kleppmann, Martin},
  year    = {2015},
  url     = {https://martin.kleppmann.com/2015/03/04/turning-the-database-inside-out.html},
  urldate = {2024-10-21}
}

@online{redpandaIntro,
  title   = {Introduction to Redpanda},
  author  = {Redpanda},
  year    = {2024},
  url     = {https://docs.redpanda.com/current/get-started/intro-to-events/},
  urldate = {2024-12-10}
}

@online{redpandaArchitecture,
  title   = {How Redpanda Works},
  author  = {Redpanda},
  year    = {2024},
  url     = {https://docs.redpanda.com/current/get-started/architecture/},
  urldate = {2024-12-10}
}

@online{pgLogicalReplication,
  title   = {Logical Replication},
  author  = {PostgreSQL},
  year    = {2024},
  url     = {https://www.postgresql.org/docs/17/logical-replication.html},
  urldate = {2024-12-11}
}

@online{insideLogicalReplication,
  title   = {Inside logical replication in PostgreSQL: How it works},
  author  = {Vigneshwaran},
  year    = {2023},
  url     = {https://www.postgresql.fastware.com/blog/inside-logical-replication-in-postgresql},
  urldate = {2024-12-11}
}

@online{whatIsRedpanda,
  title   = {What is Redpanda?},
  author  = {Redpanda},
  year    = {2024},
  url     = {https://www.redpanda.com/what-is-redpanda},
  urldate = {2024-12-10}
}

@online{raftKraft,
  title   = {RAFT vs. KRAFT},
  author  = {Gasimov, Elchin},
  year    = {2022},
  url     = {https://medium.com/memphis-dev/raft-vs-kraft-45587fe8a898},
  urldate = {2024-12-10}
}

@online{schemaBasedSharding,
  title   = {Citus 12: Schema-based sharding for PostgreSQL},
  author  = {Slot, Marco},
  year    = {2023},
  url     = {https://www.citusdata.com/blog/2023/07/18/citus-12-schema-based-sharding-for-postgres/},
  urldate = {2024-12-08}
}

@online{streaming101,
  title   = {Streaming 101: The world beyond batch},
  author  = {Akidau, Tyler},
  year    = {2015},
  url     = {https://www.oreilly.com/radar/the-world-beyond-batch-streaming-101/},
  urldate = {2024-11-05}
}

@online{streamProcessingComparison,
  title   = {Spark Streaming vs Flink vs Storm vs Kafka Streams vs Samza : Choose Your Stream Processing Framework},
  author  = {Prakash, Chandan},
  year    = {2018},
  url     = {https://medium.com/@chandanbaranwal/spark-streaming-vs-flink-vs-storm-vs-kafka-streams-vs-samza-choose-your-stream-processing-91ea3f04675b},
  urldate = {2024-11-05}
}

@online{puttingApacheKafka,
  title   = {Putting Apache Kafka To Use: A Practical Guide to Building an Event Streaming Platform (Part 1)},
  author  = {Kreps, Jay},
  year    = {2015},
  url     = {https://www.confluent.io/blog/event-streaming-platform-1/},
  urldate = {2024-10-21}
}

@online{swiftTicketmaster,
  title   = {Ticketmaster Cancels Taylor Swift Tour’s Public Tickets Sale Due to ‘High Demand’ and ‘Insufficient Inventory’},
  author  = {Sharf, Zack and Aswad, Jem},
  year    = {2024},
  url     = {https://variety.com/2022/music/news/ticketmaster-cancels-taylor-swift-public-ticket-sales-eras-tour-1235435965/},
  urldate = {2024-10-21}
}

@online{coldplayBookMyShow,
  title   = {Coldplay India Concert 2025: BookMyShow crashes minutes before tickets go live; IRCTC and other memes flood internet},
  author  = {TOI Tech Desk},
  year    = {2024},
  url     = {https://timesofindia.indiatimes.com/technology/tech-news/coldplay-india-concert-2025-bookmyshow-crashes-minutes-before-tickets-go-live-irctc-and-other-memes-flood-internet/articleshow/113568087.cms},
  urldate = {2024-10-21}
}

@online{queueLoadLeveling,
  title   = {Queue-Based Load Leveling pattern},
  author  = {Microsoft},
  year    = {2024},
  url     = {https://learn.microsoft.com/en-us/azure/architecture/patterns/queue-based-load-leveling},
  urldate = {2024-12-11}
}

@online{msCQRS,
  title   = {CQRS pattern},
  author  = {Microsoft},
  year    = {2024},
  url     = {https://learn.microsoft.com/en-us/azure/architecture/patterns/cqrs},
  urldate = {2024-12-11}
}

@online{fwCQRS,
  title   = {CQRS},
  author  = {Fowler, Martin},
  year    = {2011},
  url     = {https://martinfowler.com/bliki/CQRS.html},
  urldate = {2024-12-11}
}

@online{masteringBackpressure,
  title   = {Mastering Back Pressure in Reactive Distributed Systems},
  author  = {Mullapudi, Mahi},
  month   = {June},
  year    = {2024},
  url     = {https://dev.to/tutorialq/mastering-back-pressure-in-reactive-distributed-systems-37mk},
  urldate = {2024-12-11}
}

@online{backpressureExplained,
  title   = {Backpressure explained — the resisted flow of data through software},
  author  = {Phelps, Jay},
  month   = {2},
  year    = {2019},
  url     = {https://medium.com/@jayphelps/backpressure-explained-the-flow-of-data-through-software-2350b3e77ce7},
  urldate = {2024-12-11}
}

@online{redisExplained,
  title   = {Redis Explained},
  author  = {Yusuf, Mahdi},
  month   = {8},
  year    = {2022},
  url     = {https://architecturenotes.co/p/redis},
  urldate = {2024-12-12}
}

@misc{barua2024enhancingresiliencescalabilitytravel,
  title         = {Enhancing Resilience and Scalability in Travel Booking Systems: A Microservices Approach to Fault Tolerance, Load Balancing, and Service Discovery},
  author        = {Biman Barua and M. Shamim Kaiser},
  year          = {2024},
  eprint        = {2410.19701},
  archiveprefix = {arXiv},
  primaryclass  = {cs.SE},
  url           = {https://arxiv.org/abs/2410.19701}
}

@online{cockroachDB,
  title   = {CockroachDB Documentation},
  author  = {CockroachLabs},
  year    = {2024},
  url     = {https://www.cockroachlabs.com/docs/},
  urldate = {2024-12-20}
}

@online{vitess,
  title   = {Vitess Documentation},
  author  = {Vitessio},
  year    = {2024},
  url     = {https://vitess.io/docs/21.0/},
  urldate = {2024-12-20}
}

@online{tiDB,
  title   = {TiDB Documentation},
  author  = {PingCAP},
  year    = {2024},
  url     = {https://docs.pingcap.com/},
  urldate = {2024-12-20}
}

@online{yugabyte,
  title   = {YugabyteDB Documentation},
  author  = {Yugabyte},
  year    = {2024},
  url     = {https://docs.yugabyte.com/},
  urldate = {2024-12-20}
}

@online{royNatsRmqKafka,
  title   = {Comparison of NATS, RabbitMQ, NSQ, and Kafka},
  author  = {Roy, Hrittik},
  year    = {2024},
  url     = {https://gcore.com/learning/nats-rabbitmq-nsq-kafka-comparison/},
  urldate = {2024-12-22}
}

@online{arshadChoosingTheRightMessaging,
  title   = {Choosing the Right Messaging System: Kafka, Redis, RabbitMQ, ActiveMQ, and NATS Compared},
  author  = {Arshad, Hamza},
  year    = {2024},
  url     = {https://medium.com/@sheikh.hamza.arshad/choosing-the-right-messaging-system-kafka-redis-rabbitmq-activemq-and-nats-compared-fa2dd385976f},
  urldate = {2024-12-22}
}

@online{comparingKafkaAlternatives,
  title   = {Comparing Apache Kafka alternatives},
  author  = {Redpanda},
  year    = {2024},
  url     = {https://www.redpanda.com/guides/kafka-alternatives},
  urldate = {2024-12-22}
}

@article{studyOnModeryMessaging,
  author     = {Sharvari and
                Sowmya},
  title      = {A study on Modern Messaging Systems- Kafka, RabbitMQ and {NATS} Streaming},
  journal    = {CoRR},
  volume     = {abs/1912.03715},
  year       = {2019},
  url        = {http://arxiv.org/abs/1912.03715},
  eprinttype = {arXiv},
  eprint     = {1912.03715},
  timestamp  = {Thu, 02 Jan 2020 18:08:18 +0100},
  biburl     = {https://dblp.org/rec/journals/corr/abs-1912-03715.bib},
  bibsource  = {dblp computer science bibliography, https://dblp.org}
}